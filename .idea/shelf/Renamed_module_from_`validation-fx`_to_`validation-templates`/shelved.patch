Index: kofu-mvc-validation/src/main/kotlin/com/sample/HandlersX.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sample\n\nimport arrow.core.Either\nimport arrow.core.extensions.either.bifunctor.bifunctor\nimport arrow.core.fix\nimport arrow.fx.ForIO\nimport arrow.fx.fix\nimport com.validation.User\nimport com.validation.ValidationError\nimport com.validation.rules.validateUserWithRules\nimport com.validation.typeclass.EffectValidator\nimport com.validation.typeclass.ForFailFast\nimport org.springframework.web.servlet.function.ServerRequest\nimport org.springframework.web.servlet.function.ServerResponse\nimport org.springframework.web.servlet.function.ServerResponse.badRequest\nimport org.springframework.web.servlet.function.ServerResponse.ok\nimport org.springframework.web.servlet.function.body\n\nclass HandlersX(private val blockingValidator: EffectValidator<ForIO, ForFailFast<ValidationError>, ValidationError>) {\n    fun upsertX(request: ServerRequest): ServerResponse {\n        val user = request.body<User>()\n        return blockingValidator.run {\n            val result = validateUserWithRules(user).fix().unsafeRunSync()\n            repo.run {\n                user.upsert(Either.bifunctor(), result).fix()\n            }.fold(\n                    { it.fold(badRequest()::body, ok()::body) },\n                    ok()::body\n            )\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- kofu-mvc-validation/src/main/kotlin/com/sample/HandlersX.kt	(revision efdb31f921a7211732307f9d74e1c0f7ce633c9c)
+++ kofu-mvc-validation/src/main/kotlin/com/sample/HandlersX.kt	(date 1584694585821)
@@ -20,7 +20,7 @@
     fun upsertX(request: ServerRequest): ServerResponse {
         val user = request.body<User>()
         return blockingValidator.run {
-            val result = validateUserWithRules(user).fix().unsafeRunSync()
+            val result = validateUserWithRules(user).fix()
             repo.run {
                 user.upsert(Either.bifunctor(), result).fix()
             }.fold(
Index: validation-templates/src/test/kotlin/com/validation/DeferredEmailRulesTests.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- validation-templates/src/test/kotlin/com/validation/DeferredEmailRulesTests.kt	(date 1584674818943)
+++ validation-templates/src/test/kotlin/com/validation/DeferredEmailRulesTests.kt	(date 1584674818943)
@@ -0,0 +1,40 @@
+/* gakshintala created on 3/16/20 */
+package com.validation
+
+import arrow.core.fix
+import arrow.fx.ForIO
+import arrow.fx.IO
+import arrow.fx.extensions.io.monadDefer.monadDefer
+import arrow.fx.fix
+import arrow.fx.typeclasses.MonadDefer
+import com.validation.rules.validateEmailWithRules
+import com.validation.typeclass.DeferValidator
+import com.validation.typeclass.ForFailFast
+import com.validation.typeclass.failFast
+import org.junit.jupiter.api.Assertions
+import org.junit.jupiter.api.BeforeAll
+import org.junit.jupiter.api.Test
+
+class DeferredEmailRulesTests {
+    
+    
+    private lateinit var deferValidator: DeferValidator<ForIO, ForFailFast<ValidationError>, ValidationError>
+
+    @BeforeAll
+    fun beforeAll() {
+        deferValidator = object : DeferValidator<ForIO, ForFailFast<ValidationError>, ValidationError>, MonadDefer<ForIO> by IO.monadDefer() {
+            override val validatorAE = failFast<ValidationError>()
+        }
+    }
+
+    @Test
+    fun `FF Email Rule Runner on Invalid user`() {
+        val invalidUser = User("smaldini", "smaldini-kt.com${(0..251).map { "g" }}", "StÃ©phane", "Maldini", "london")
+        val result = deferValidator.validateEmailWithRules(invalidUser.email).fix()
+        /*Assertions.assertTrue(result.isLeft() ?: false)
+        result.fold({
+            Assertions.assertEquals(1, it.size)
+            Assertions.assertEquals(ValidationError.DoesNotContain("@"), it.head)
+        }, {})*/
+    }
+}
Index: validation-templates/src/main/kotlin/com/validation/rules/DeferredEmailRules.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- validation-templates/src/main/kotlin/com/validation/rules/DeferredEmailRules.kt	(date 1584689993414)
+++ validation-templates/src/main/kotlin/com/validation/rules/DeferredEmailRules.kt	(date 1584689993414)
@@ -0,0 +1,34 @@
+package com.validation.rules
+
+import arrow.core.nel
+import arrow.fx.typeclasses.MonadDefer
+import com.validation.ValidationError
+import com.validation.typeclass.DeferValidator
+import com.validation.typeclass.ValidatorAE
+
+/**
+ * ------------Email Rules------------
+ * Arbitrary rules can be defined anywhere outside the Rules algebra.
+ */
+private fun <F, S> DeferValidator<F, S, ValidationError>.contains(email: String, needle: String) = defer {
+    validatorAE.run {
+        if (email.contains(needle, false)) just(email)
+        else raiseError(ValidationError.DoesNotContain(needle).nel())
+    }.just()
+}
+
+private fun <F, S> DeferValidator<F, S, ValidationError>.maxLength(email: String, maxLength: Int) = defer {
+    validatorAE.run {
+        if (email.length <= maxLength) just(email)
+        else raiseError(ValidationError.MaxLength(maxLength).nel())
+    }.just()
+}
+
+/**
+ * Some rules that use the applicative syntax to validate and gather errors.
+ */
+fun <F, S> DeferValidator<F, S, ValidationError>.validateEmailWithRules(email: String) =
+    mapN(
+            contains(email, "@"),
+            maxLength(email, 250)
+    ) {}.handleErrorWith { raiseError(it) }
Index: validation-templates/src/main/kotlin/com/validation/rules/UserRules.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.validation.rules\n\nimport arrow.core.nel\nimport com.validation.User\nimport com.validation.ValidationError\nimport com.validation.ValidationError.UserCityInvalid\nimport com.validation.ValidationError.UserLoginExits\nimport com.validation.typeclass.EffectValidator\n\n/**\n * ------------User Rules------------\n */\nprivate fun <F, S> EffectValidator<F, S, ValidationError>.cityShouldBeValid(user: User) = fx.async { \n    repo.run {\n        validatorAE.run {\n            val cityValid = user.isUserCityValid().bind()\n            if (cityValid) just(cityValid)\n            else raiseError(UserCityInvalid(user.city).nel())\n        }\n    }\n}\n\nprivate fun <F, S> EffectValidator<F, S, ValidationError>.loginShouldNotExit(user: User) = fx.async {\n    repo.run {\n        validatorAE.run {\n            val loginExists = user.doesUserLoginExist().bind()\n            if (loginExists) raiseError(UserLoginExits(user.login).nel())\n            else just(loginExists)\n        }\n    }\n}\n\nfun <F, S> EffectValidator<F, S, ValidationError>.validateUserWithRules(user: User) = fx.async {\n    repo.run {\n        validatorAE.run {\n            mapN( // \uD83D\uDEA9 This has a bug, order of validation is not from left to right. Waiting for bug fix.\n                    validateEmailWithRules(user.email),\n                    cityShouldBeValid(user).bind(),\n                    loginShouldNotExit(user).bind()\n            ) {}.handleErrorWith { raiseError(it) }\n        }\n    }\n}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- validation-templates/src/main/kotlin/com/validation/rules/UserRules.kt	(revision efdb31f921a7211732307f9d74e1c0f7ce633c9c)
+++ validation-templates/src/main/kotlin/com/validation/rules/UserRules.kt	(date 1584695853788)
@@ -10,7 +10,7 @@
 /**
  * ------------User Rules------------
  */
-private fun <F, S> EffectValidator<F, S, ValidationError>.cityShouldBeValid(user: User) = fx.async { 
+private fun <F, S> EffectValidator<F, S, ValidationError>.cityShouldBeValid(user: User) = fx.async {
     repo.run {
         validatorAE.run {
             val cityValid = user.isUserCityValid().bind()
@@ -31,15 +31,11 @@
 }
 
 fun <F, S> EffectValidator<F, S, ValidationError>.validateUserWithRules(user: User) = fx.async {
-    repo.run {
-        validatorAE.run {
-            mapN( // ðŸš© This has a bug, order of validation is not from left to right. Waiting for bug fix.
-                    validateEmailWithRules(user.email),
-                    cityShouldBeValid(user).bind(),
-                    loginShouldNotExit(user).bind()
-            ) {}.handleErrorWith { raiseError(it) }
-        }
-    }
+    tupledN(
+            
+            defer { cityShouldBeValid(user) },
+            defer { loginShouldNotExit(user) }
+    ).handleErrorWith { raiseError(it) }
 }
 
 
